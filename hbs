#!/bin/python3

# SPDX-License-Identifier: BSD-3-Clause
# Copyright (c) 2023 Micha≈Ç Kruszewski
# https://github.com/m-kru/hbs

from datetime import datetime
import json
import os
import pathlib
import re
import subprocess
import sys

import concurrent.futures
import multiprocessing

this_script_dir = os.path.dirname(os.path.abspath(__file__))
workers = multiprocessing.cpu_count()

error_regexp = re.compile(r"\berror\b")
warning_regexp = re.compile(r"\bwarning\b")

help_help = """Usage:

  hbs <command> [arguments]

The command is one of:

  doc           Show documentation for hbs Tcl symbol or EDA tool
  dump-cores    Dump info about cores in JSON format
  graph         Output dependency graph for given target
  help          Print help message for program or given command
  list-cores    List cores
  list-targets  List targets
  list-tb       List testbench targets
  run           Run given target
  test          Run testbench targets
  version       Print hbs version

Type 'hbs help <command>' to obtain more information about particular command."""

doc_help = """Show documentation for hbs Tcl symbol.

  hbs doc <symbol-name>

Symbol name must be part of the main API (must be defined in the hbs namespace
and must start with an uppercase letter). Private symbols documentation cannot
be obtained using the doc command. However, one can always open the hbs.tcl
file and see the documentation in the source.

The "hbs::" prefix in the symbol name is optional.
For example, "hbs doc AddDep" returns the same documentation as "hbs doc hbs::AddDep"."""

dump_cores_help = """Dump info about cores found in .hbs files in JSON format.

  hbs dump-cores

The JSON is directed to stdout. If you want to save it in a file
simply redirect stdout."""

graph_help = """Output dependency graph for given target.

  hbs graph path/to/file/with/cores.json [top-target-path]

If top target path is not provided, then it is assumed to be the same
as the base of the json file path, without the '.json' suffix."""

list_cores_help = """List cores found in .hbs files.

  hbs list-cores [core-path-patterns...]

If core-path-patterns are not provided, all found cores are listed.
If core-path-patterns are provided, then only cores whose path
contains at least one pattern are listed."""

list_targets_help = """List targets for cores found in .hbs files.

  hbs list-targets [target-path-patterns...]

If target-path-patterns are not provided, all found targets are listed.
If target-path-patterns are provided, then only targets whose path
contains at least one pattern are listed.

For example, if you want to list all targets for a given core,
simply provide the core path as the argument."""

list_tb_help = """List testbench targets for cores found in .hbs files.

  hbs list-tb [target-path-patterns...]

If target-path-patterns are not provided, all found testbench targets are listed.
If target-path-patterns are provided, then only testbench targets whose path
contains at least one pattern are listed.

For example, if you want to list all testbench targets for a given core,
simply provide the core path as the argument."""

run_help = """Run provided target.

  hbs run <target-path> [target-args...]

The target path must be absolute target path containing the core path
and target name. Target arguments are forwarded to the target proc call.

Example:

  hbs run your::core::path::target-name synthesis"""

test_help = """Run testbench targets.

  hbs test [-workers N] [target-path-patterns...]

Testbench targets are detected automatically.
A testbench target is a target which name:
  - starts with "tb-" or "tb_",
  - ends with "-tb" or "_tb",
  - equals "tb".

-workers specifies the number of targets to run simultaneously (in parallel).
N must be a positive integer. -workers must be provided before target path patterns.
Otherwise, it will be treated as one of the target path patterns.
By default, the number of workers equals the number of available CPUs.

If target path patterns are not provided, all testbench targets are run.
If target path patterns are provided, then only testbench targets whose path
contains at least one pattern are run."""


version_help = """Print hbs version.

  hbs version

The version consists of two numbers MAJOR.MINOR (for example, 1.2).
The major number changes in case of features or error fixes     breaking backward compatibility.
The minor number chnages in case of features or error fixes non-breaking backward compatibility."""


def error(msg, end='\n'):
    print(msg, file=sys.stderr, end=end)
    exit(1)


if len(sys.argv) < 2:
    error("missing command, check help")


def hbs_help(cmd):
    if cmd == "" or cmd == "help":
        print(help_help)
    elif cmd == "doc":
        print(doc_help)
    elif cmd == "dump-cores":
        print(dump_cores_help)
    elif cmd == "graph":
        print(graph_help)
    elif cmd == "list-cores":
        print(list_cores_help)
    elif cmd == "list-targets":
        print(list_targets_help)
    elif cmd == "list-tb":
        print(list_tb_help)
    elif cmd == "run":
        print(run_help)
    elif cmd == "test":
        print(test_help)
    elif cmd == "version":
        print(version_help)


def add_target_deps(graph, nodes, cores, target_path):
    path_parts = target_path.split('::')

    target_name = path_parts[-1]
    core_path = '::'.join(path_parts[:-1])

    if core_path not in cores:
        error(f"core '{core_path}' not found in json file")
    core = cores[core_path]

    if target_name not in core['targets']:
        error(f"target '{target_name}' for core '{core_path}' not found in json file")

    target = core['targets'][target_name]

    target_node = target_path.replace('::', '/')
    if target_node not in nodes:
        nodes[target_name] = True
        graph.node(target_node, target_path)

    for dep_path in target['dependencies']:
        dep_node = dep_path.replace('::', '/')
        if dep_node not in nodes:
            nodes[dep_node] = True
            graph.node(dep_node, dep_path)

        graph.edge(target_node, dep_node)
        add_target_deps(graph, nodes, cores, dep_path)


def doc(args):
    if len(args) == 0:
        error("doc command requires symbol path")
    if len(args) > 1:
        error("doc command accepts only one symbol path")

    sym_name = args[0]
    if sym_name.startswith("hbs::"):
        sym_name = sym_name[5:]

    doc = ""
    state = "before public api"
    hbs_tcl = open(os.path.join(this_script_dir, 'hbs.tcl'))
    for line in hbs_tcl:
        if state == "before public api":
            if line.startswith("namespace eval hbs"):
                state = "in public api"
        elif state == "in public api":
            if line[0] == '}':
                state = "after public api"

        line = line.lstrip()

        if len(line) == 0:
            doc = ""
            continue
        elif line[0] == '#':
            doc += line

        if state == "in public api":
            words = line.split()

            if words[0] == 'set':
                if words[1] == sym_name:
                    doc += line.rstrip()
                    print(doc)
                    return
            elif words[0] == 'proc':
                if words[1] == sym_name:
                    doc += line.rstrip()[:-1]
                    print(doc)
                    return
        elif state == "after public api":
            if line.startswith("namespace eval hbs::"):
               tool = line.split()[2].split('::')[1]
               if tool == sym_name:
                    doc = doc[:-1]
                    print(doc)
                    return

    error(f"doc for symbol '{args[0]}' not found")


# The first arg is path to the cores json file.
# The second arg is an optional top target path.
def graph(args):
    import graphviz

    cores_json_path = args[0]
    if len(args) == 1:
        target_path = os.path.basename(cores_json_path).replace('--', '::')
        if cores_json_path.endswith('.json'):
            target_path = target_path[0:-5]
    elif len(args) > 1:
        target_path = args[1]

    cores_json = open(cores_json_path)
    cores = json.load(cores_json)

    nodes = dict()
    graph = graphviz.Digraph(
        'G', strict=True, filename=f"{target_path.replace('::', '--')}"
    )
    add_target_deps(graph, nodes, cores, target_path)
    graph.render(cleanup=True)


def path_has_pattern(path, patterns):
    if len(patterns) == 0:
        return True

    for pattern in patterns:
        if pattern in path:
            return True
    return False


def run_to_file(target_path):
    """ run_to_file runs given target and directs output to file. """
    log_dir = os.path.join('build', target_path.replace('::', '--'))
    pathlib.Path(log_dir).mkdir(parents=True, exist_ok=True)
    log_file_path = os.path.join(log_dir, 'output.txt')
    log_file = open(log_file_path, 'w+')

    result = {'target': target_path, 'passed': False}
    global test_longest_path_len

    try:
        output = subprocess.run(
            [os.path.join(this_script_dir, 'hbs.tcl'), 'run', target_path],
            check=True,
            encoding="utf-8",
            stdout=log_file,
            stderr=log_file,
        )
        result['passed'] = True
        msg = f"{target_path.ljust(test_longest_path_len+1)} \033[92mpassed\033[0m"
    except subprocess.CalledProcessError:
        msg = f"{target_path.ljust(test_longest_path_len+1)} \033[91mfailed\033[0m"

    log_file.close()
    log = open(log_file_path, 'r')

    error_count = 0
    warning_count = 0
    for line in log:
        error_count += len(error_regexp.findall(line.lower()))
        warning_count += len(warning_regexp.findall(line.lower()))

    log.close()

    if error_count > 0:
        msg += f"  errors: {error_count}"
    if warning_count > 0:
        msg += f"  warnings: {warning_count}"

    print(msg)

    result['error_count'] = error_count
    result['warning_count'] = warning_count

    global test_results
    test_results.append(result)


test_results = []
test_longest_path_len = 0


def print_test_summary(start_time):
    s = (datetime.now() - start_time).seconds
    hours, remainder = divmod(s, 3600)
    minutes, seconds = divmod(remainder, 60)

    global test_results

    passed = 0
    failed = 0
    errors = 0
    warnings = 0

    for r in test_results:
        if r['passed']:
            passed += 1
        else:
            failed += 1

        errors += r['error_count']
        warnings += r['warning_count']

    print()
    print(f"time:     {hours} h {minutes} min {seconds} s")
    print(f"targets:  {len(test_results)}")
    print(f"\033[92mpassed\033[0m:   {passed}")
    print(f"\033[91mfailed\033[0m:   {failed}")
    print(f"errors:   {errors}")
    print(f"warnings: {warnings}")


def test(patterns):
    """patterns are target path patterns"""
    start_time = datetime.now()

    output = subprocess.run(
        [os.path.join(this_script_dir, 'hbs.tcl'), 'dump-cores'],
        capture_output=True,
        encoding="utf-8",
    )
    if output.returncode != 0:
        error(output.stderr, end='')

    cores = json.loads(output.stdout)

    test_targets = []
    for core, core_info in cores.items():
        for target in core_info['targets']:
            if not (
                target == 'tb'
                or target.startswith('tb_')
                or target.startswith('tb-')
                or target.endswith('_tb')
                or target.endswith('-tb')
            ):
                continue

            target_path = core + '::' + target
            if path_has_pattern(target_path, patterns):
                test_targets.append(target_path)
                global test_longest_path_len
                if len(target_path) > test_longest_path_len:
                    test_longest_path_len = len(target_path)

    test_targets.sort()
    workers_count = multiprocessing.cpu_count()

    print(f"running {len(test_targets)} targets with {workers_count} workers\n")

    with concurrent.futures.ThreadPoolExecutor(max_workers=workers) as executor:
        executor.map(lambda t: run_to_file(t), test_targets)

    print_test_summary(start_time)


def list_cores(patterns):
    output = subprocess.run(
        [os.path.join(this_script_dir, 'hbs.tcl'), 'dump-cores'],
        capture_output=True,
        encoding="utf-8",
    )
    if output.returncode != 0:
        error(output.stderr, end='')

    cores = json.loads(output.stdout)

    for core, core_info in sorted(cores.items()):
        if path_has_pattern(core, patterns):
            print(core)


def list_targets(patterns):
    output = subprocess.run(
        [os.path.join(this_script_dir, 'hbs.tcl'), 'dump-cores'],
        capture_output=True,
        encoding="utf-8",
    )
    if output.returncode != 0:
        error(output.stderr, end='')

    cores = json.loads(output.stdout)

    targets = dict()

    for core, core_info in cores.items():
        for target in core_info['targets']:
            target_path = core + '::' + target
            if path_has_pattern(target_path, patterns):
                if core not in targets:
                    targets[core] = []
                targets[core].append(target_path)

    for core in sorted(targets):
        for tb in targets[core]:
            print(tb)


def list_tb(patterns):
    output = subprocess.run(
        [os.path.join(this_script_dir, 'hbs.tcl'), 'dump-cores'],
        capture_output=True,
        encoding="utf-8",
    )
    if output.returncode != 0:
        error(output.stderr, end='')

    cores = json.loads(output.stdout)

    test_targets = dict()

    # Testbench targets discovery logic
    for core, core_info in cores.items():
        if path_has_pattern(core, patterns):
            test_targets[core] = []
        else:
            continue

        for target in core_info['targets']:
            if not (
                target == 'tb'
                or target.startswith('tb_')
                or target.startswith('tb-')
                or target.endswith('_tb')
                or target.endswith('-tb')
            ):
                continue

            target_path = core + '::' + target
            test_targets[core].append(target_path)

    # Print Logic
    for core in sorted(test_targets):
        for tb in test_targets[core]:
            print(tb)


cmd = sys.argv[1]

if cmd == "help":
    if len(sys.argv) == 2:
        hbs_help('')
    elif len(sys.argv) == 3:
        hbs_help(sys.argv[2])
    else:
        error("help command accepts one or no argument")
elif cmd == "doc":
    doc(sys.argv[2:])
elif cmd == "graph":
    if len(sys.argv) < 3:
        error(
            "graph command requires at least path to json file with cores"
        )
    elif len(sys.argv) > 4:
        error(
            "graph command requires at most 2 arguments, path to json file with cores and optional top target path"
        )
    graph(sys.argv[2:])
elif cmd == "dump-cores":
    status = subprocess.run([os.path.join(this_script_dir, 'hbs.tcl'), 'dump-cores', *sys.argv[2:]])
    exit(status.returncode)
elif cmd == "list-cores":
    list_cores(sys.argv[2:])
elif cmd == "list-targets":
    list_targets(sys.argv[2:])
elif cmd == "run":
    if len(sys.argv) < 3:
        error("run command requires at least target path")
    status = subprocess.run(
        [os.path.join(this_script_dir, 'hbs.tcl'), 'run', *sys.argv[2:]]
    )
    exit(status.returncode)
elif cmd == "test":
    test(sys.argv[2:])
elif cmd == "list-tb":
    list_tb(sys.argv[2:])
elif cmd == "version":
    if len(sys.argv) > 2:
        error("version command doesn't accept any arguments")
    status = subprocess.run([os.path.join(this_script_dir, 'hbs.tcl'), 'version'])
    exit(status.returncode)
else:
    error(f"invalid command '{cmd}', check help")
