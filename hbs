#!/bin/python3

# SPDX-License-Identifier: BSD-3-Clause
# Copyright (c) 2023 Micha≈Ç Kruszewski
# https://github.com/m-kru/hbs

from datetime import datetime
import json
import os
import pathlib
import subprocess
import sys

import concurrent.futures
import multiprocessing

this_script_dir = os.path.dirname(os.path.abspath(__file__))
workers = multiprocessing.cpu_count()

help_help = """Usage:
    
  hbs <command> [arguments]

The command is one of:

  help          Print help message
  graph         Output dependency graph for given target
  dump-cores    Dump info about cores in JSON format
  list-cores    List cores found in .hbs files
  list-targets  List targets for given core
  run           Run given target
  test          Run testbenches matching given target path
  version       Print hbs version

Type 'hbs help <command>' to obtain more information about particular command."""

graph_help = """Usage:

  hbs graph hbs.json top-target-path"""

list_cores_help = """Usage:
    
  hbs list-cores

List cores found in .hbs files."""

list_targets_help = """Usage:

  hbs list-targets core-path

List targets for given core. Core path must be absolute."""

run_help = """Usage:
        
  hbs run <target-path> [target-args...]

Run provided target. The target path must be absolute target path containing
the core path and target name. Target arguments are forwarded to the target
proc call.

Example:

  hbs run your::core::path::target-name"""

test_help = """Usage:

  hbs test [-workers N] [target-path-patterns...]

Run test targets. Test targets are detected automatically.
A test target is a target which name:
  - starts with "tb-" or "tb_",
  - ends with "-tb" or "_tb",
  - equals "tb".

-workers specifies the number of targets to run simultaneously (in parallel).
N must be a positive integer. -workers must be provided before target path patterns.
Otherwise, it will be treated as one of the target path patterns.
By default the number of workers equals the number of available CPUs.

If target path patterns are not provided, all test targets are run.
If target path patterns are provided, only targets whose paths contain
at least one pattern are run."""


def error(msg, end='\n'):
    print(msg, file=sys.stderr, end=end)
    exit(1)


if len(sys.argv) < 2:
    error("missing command, check help")


def hbs_help(cmd):
    if cmd == "" or cmd == "help":
        print(help_help)
    elif cmd == "graph":
        print(graph_help)
    elif cmd == "list-cores":
        print(list_cores_help)
    elif cmd == "list-targets":
        print(list_targets_help)
    elif cmd == "run":
        print(run_help)
    elif cmd == "test":
        print(test_help)
    else:
        print(f"invalid command '{cmd}', check help")


def add_target_deps(graph, nodes, cores, target_path):
    path_parts = target_path.split('::')

    target_name = path_parts[-1]
    core_path = '::'.join(path_parts[:-1])

    if core_path not in cores:
        error(f"core '{core_path}' not found in json file")
    core = cores[core_path]

    if target_name not in core['targets']:
        error(f"target '{target_name}' for core '{core_path}' not found in json file")

    target = core['targets'][target_name]

    target_node = target_path.replace('::', '/')
    if target_node not in nodes:
        nodes[target_name] = True
        graph.node(target_node, target_path)

    for dep_path in target['dependencies']:
        dep_node = dep_path.replace('::', '/')
        if dep_node not in nodes:
            nodes[dep_node] = True
            graph.node(dep_node, dep_path)

        graph.edge(target_node, dep_node)
        add_target_deps(graph, nodes, cores, dep_path)


def graph(cores_json_path, target_path):
    import graphviz

    cores_json = open(cores_json_path)
    cores = json.load(cores_json)

    nodes = dict()
    graph = graphviz.Digraph(
        'G', strict=True, filename=f"{target_path.replace('::', '-')}"
    )
    add_target_deps(graph, nodes, cores, target_path)
    graph.render(cleanup=True)


def target_path_has_pattern(path, patterns):
    if len(patterns) == 0:
        return True

    for pattern in patterns:
        if pattern in path:
            return True
    return False


def run_to_file(target_path):
    """ run_to_file runs given target and directs output to file. """
    log_dir = os.path.join('build', target_path.replace('::', '/'))
    pathlib.Path(log_dir).mkdir(parents=True, exist_ok=True)
    log_file_path = os.path.join(log_dir, 'output.txt')
    log_file = open(log_file_path, 'w+')

    result = {'target': target_path, 'passed': False}
    global test_longest_path_len

    try:
        output = subprocess.run(
            [os.path.join(this_script_dir, 'hbs.tcl'), 'run', target_path],
            check=True,
            encoding="utf-8",
            stdout=log_file,
            stderr=log_file,
        )
        result['passed'] = True
        msg = f"{target_path.ljust(test_longest_path_len+1)} \033[92mpassed\033[0m"
    except subprocess.CalledProcessError:
        msg = f"{target_path.ljust(test_longest_path_len+1)} \033[91mfailed\033[0m"

    log_file.close()
    log = open(log_file_path, 'r')

    errors_count = 0
    warnings_count = 0
    for line in log:
        errors_count += line.lower().count("error")
        warnings_count += line.lower().count("warn")

    log.close()

    if errors_count > 0:
        msg += f"  errors: {errors_count}"
    if warnings_count > 0:
        msg += f"  warnings: {warnings_count}"

    print(msg)

    result['errors_count'] = errors_count
    result['warnings_count'] = warnings_count

    global test_results
    test_results.append(result)


test_results = []
test_longest_path_len = 0


def print_test_summary(start_time):
    s = (datetime.now() - start_time).seconds
    hours, remainder = divmod(s, 3600)
    minutes, seconds = divmod(remainder, 60)

    global test_results

    passed = 0
    failed = 0
    errors = 0
    warnings = 0

    for r in test_results:
        if r['passed']:
            passed += 1
        else:
            failed += 1

        errors += r['errors_count']
        warnings += r['warnings_count']

    print()
    print(f"time:     {hours} h {minutes} min {seconds} s")
    print(f"targets:  {len(test_results)}")
    print(f"\033[92mpassed\033[0m:   {passed}")
    print(f"\033[91mfailed\033[0m:   {failed}")
    print(f"errors:   {errors}")
    print(f"warnings: {warnings}")


def test(patterns):
    """patterns are target path patterns"""
    start_time = datetime.now()

    output = subprocess.run(
        [os.path.join(this_script_dir, 'hbs.tcl'), 'dump-cores'],
        capture_output=True,
        encoding="utf-8",
    )
    if output.returncode != 0:
        error(output.stderr, end='')

    cores = json.loads(output.stdout)

    test_targets = []
    for core, core_info in cores.items():
        for target in core_info['targets']:
            if not (
                target == 'tb'
                or target.startswith('tb_')
                or target.startswith('tb-')
                or target.endswith('_tb')
                or target.endswith('-tb')
            ):
                continue

            target_path = core + '::' + target
            if target_path_has_pattern(target_path, patterns):
                test_targets.append(target_path)
                global test_longest_path_len
                if len(target_path) > test_longest_path_len:
                    test_longest_path_len = len(target_path)

    test_targets.sort()
    workers_count = multiprocessing.cpu_count()

    print(f"running {len(test_targets)} targets with {workers_count} workers\n")

    with concurrent.futures.ThreadPoolExecutor(max_workers=workers) as executor:
        executor.map(lambda t: run_to_file(t), test_targets)

    print_test_summary(start_time)


cmd = sys.argv[1]

if cmd == "help":
    if len(sys.argv) == 2:
        hbs_help('')
    elif len(sys.argv) == 3:
        hbs_help(sys.argv[2])
    else:
        error("help command accepts one or no argument")
elif cmd == "graph":
    if len(sys.argv) != 4:
        error(
            "graph command requires 2 arguments, path to json file with cores and top target path"
        )
    graph(sys.argv[2], sys.argv[3])
elif cmd == "dump-cores":
    if len(sys.argv) > 2:
        error("dump-cores command does not accept any arguments")
    status = subprocess.run([os.path.join(this_script_dir, 'hbs.tcl'), 'dump-cores'])
    exit(status.returncode)
elif cmd == "list-cores":
    if len(sys.argv) > 2:
        error("list-cores command does not accept any arguments")
    status = subprocess.run([os.path.join(this_script_dir, 'hbs.tcl'), 'list-cores'])
    exit(status.returncode)
elif cmd == "list-targets":
    if len(sys.argv) < 3:
        error("list-targets command requires core path")
    elif len(sys.argv) > 3:
        error("list-targets command accepts only one core path")
    status = subprocess.run(
        [os.path.join(this_script_dir, 'hbs.tcl'), 'list-targets', sys.argv[2]]
    )
    exit(status.returncode)
elif cmd == "run":
    if len(sys.argv) < 3:
        error("run command requires at least target path")
    status = subprocess.run(
        [os.path.join(this_script_dir, 'hbs.tcl'), 'run', *sys.argv[2:]]
    )
    exit(status.returncode)
elif cmd == "test":
    test(sys.argv[2:])
elif cmd == "version":
    if len(sys.argv) > 2:
        error("version command doesn't accept any arguments")
    status = subprocess.run([os.path.join(this_script_dir, 'hbs.tcl'), 'version'])
    exit(status.returncode)
else:
    error(f"invalid command '{cmd}', check help")
